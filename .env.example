# ============================================================
# Streamly 환경 설정
# 이 파일을 .env로 복사하여 사용: cp .env.example .env
# ============================================================

# Django 설정
DEBUG=True
SECRET_KEY=django-insecure-streamly-dev-key-change-in-production
ALLOWED_HOSTS=localhost,127.0.0.1,192.168.0.10,streamly.jgplabs.kr

# 데이터베이스 설정
# SQLite (로컬 개발용)
DATABASE_URL=sqlite:///db.sqlite3
# PostgreSQL (Docker 사용 시)
# DATABASE_URL=postgresql://streamly:streamly123@db:5432/streamly

# PostgreSQL 설정 (Docker 사용 시)
POSTGRES_DB=streamly
POSTGRES_USER=streamly
POSTGRES_PASSWORD=streamly123

# Redis/Celery 설정
# 로컬 개발용
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0
# Docker 사용 시
# CELERY_BROKER_URL=redis://redis:6379/0
# CELERY_RESULT_BACKEND=redis://redis:6379/0

# 텔레그램 봇 설정
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# 파일 저장 설정
DOWNLOAD_PATH=./downloads
MEDIA_ROOT=./media
STATIC_ROOT=./static_collected

# 다운로드 관리 설정
RETENTION_DAYS=14
CHECK_INTERVAL_MINUTES=1

# YouTube 설정
# YouTube API 키 (선택사항 - 현재는 yt-dlp만 사용 권장)
# YOUTUBE_API_KEY=
# 모니터링 모드: efficient (RSS/yt-dlp 사용) 또는 api (YouTube API 사용)
YOUTUBE_MONITORING_MODE=efficient

# 웹 서버 포트
WEB_PORT=8000

# 보안 설정
CSRF_TRUSTED_ORIGINS=https://streamly.jgplabs.kr,http://localhost:40732,http://localhost:8000

# ============================================================
# 사용법
# ============================================================
# 로컬 개발 (SQLite + 로컬 Redis):
# 1. cp .env.example .env
# 2. Redis 실행: redis-server
# 3. python manage.py runserver
# 4. celery -A streamly worker -l info
# 5. celery -A streamly beat -l info
#
# Docker 사용:
# 1. cp .env.example .env
# 2. docker compose up -d
# 3. 접속: http://localhost:8000
# ============================================================